{"./":{"url":"./","title":"はじめに","keywords":"","body":"はじめに 今回のゴール BigQueryに溜め込んだデータ（住所情報）を、 GoogleMapAPIを使って画面表示します。データの溜め込みや、画面表示をさせるために、Cloud StorageやCloud Functionを使用していきます今回は大きく３機能作成しますが、全てGCPコンソール上の開発で完結出来るハンズオンとなります。PCへのインストール不要なので、ブラウザ一つで開発するハンズオンを体験頂ければ幸いです。 使用する技術要素については、以下となります。※ページの最後に、技術要素の参考サイトを記載しています。 フロントエンド TypeScript Node.js Cloud Shell Editer（開発環境兼、localhosの実行環境） バックエンド JavaScript Node.js Cloud Function（サーバーレス） API GoogleMap JavaScript API BigQuery API Cloud Storage API データベース BigQuery ストレージ Cloud Storage 事前に準備頂きたいこと GCPアカウントの作成 BigQueryのデータセット作成 Cloud Storageのバケット作成 手順 全体手順としては次の流れで進めます。 　0.GCPのAPI有効化 　1.データ登録機能作成 　2.検索機能作成 　3.Map画面作成 技術要素 参考サイトのリンクを記載しておきますので、参考にお使いください。 GoogleMap JavaScript API WebGL Overlay (ThreeJS wrapper)のサンプルコードをベースにしています。 BigQuery API Cloud Storage API Cloud Function "},"Section1.html":{"url":"Section1.html","title":"0. 事前準備内容の確認","keywords":"","body":"GCPのAPI有効化 今回使用するGCPのAPIを有効化します。 GCPアカウントの確認 以下URLにアクセスし、GCPコンソールへログインします。https://console.cloud.google.com/ ダッシュボード画面が表示されることを確認します。 GCPのAPI有効化 以下URLまたは、検索バーから「Maps JavaScript API」と検索し、GoogleMap JavaScript APIを有効化します。https://console.cloud.google.com/marketplace/product/google/maps-backend.googleapis.com "},"Section2.html":{"url":"Section2.html","title":"1. テストデータの登録","keywords":"","body":"データ登録機能作成 今回は、データ（住所情報）は、JSON形式のデータを使用します。JSONデータは、BigQueryに自動で取り込めるよう、Cloud Storageに配置し、配置されたことトリガーとして、プログラムでBigQueryに自動登録するようにします。 テストデータ登録機能を作成する Cloud Functionを開きます。https://console.cloud.google.com/functions/ 『関数の作成』を選択します。 必要なAPIの有効化が求められるので、『有効にする』を選択します。 以下設定内容で、基本設定とトリガー設定を行います。※以下以外は全てデフォルト設定 | 設定項目 | 設定値 | | ---- | ---- | | 環境 | 第１世代 | | 関数名 | bigqueryLoad | | リージョン | us-central1 | | トリガータイプ | Cloud Storage | | EventType | ファイナライズ / 作成 | | バケット | *指定のバケット名 | 『保存』→『次へ』を選択します。 ランタイムは\"Node.js 16\"を選択します。 index.jsを開き、以下コードに書き換えます。また、bucketNameとdatasetIdは指定の値に書き換えます。このプログラムは、GCSに配置されたトリガー情報からファイル名を取得し、指定のGCSバケットからBigQueryのテーブルにロードを行っています。GCSとBigQueryのロケーションは同じである必要があります。今回は\"us-central1\"で統一しています。そして、エントリポイントは、JavaScriptのプログラムに合わせ、\"main\"に変更します。 ソースコード const { BigQuery } = require('@google-cloud/bigquery'); const { Storage } = require('@google-cloud/storage'); const bigquery = new BigQuery(); const storage = new Storage(); exports.main = async (event, context) => { const gcsEvent = event const bucketName = 【指定のバケット名】 const metadata = { sourceFormat: 'NEWLINE_DELIMITED_JSON', schema: { fields: [ {\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, { \"name\": \"features\", \"type\": \"RECORD\", \"mode\": \"REPEATED\", \"fields\": [ { \"name\": \"geometry\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ { \"name\": \"coordinates\", \"type\": \"NUMERIC\", \"mode\": \"REPEATED\", \"fields\": [] }, { \"name\": \"type\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" } ] }, { \"name\": \"properties\", \"type\": \"RECORD\", \"mode\": \"REPEATED\", \"fields\": [ { \"name\": \"GoogleMapsURL\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"Location\", \"type\": \"RECORD\", \"mode\": \"REPEATED\", \"fields\": [ { \"name\": \"Address\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"BusinessName\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"CountryCode\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"GeoCoordinates\", \"type\": \"RECORD\", \"mode\": \"REPEATED\", \"fields\": [ { \"name\": \"Latitude\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"Longitude\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" } ] } ] }, { \"name\": \"Published\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"Title\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" }, { \"name\": \"Updated\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" } ] }, { \"name\": \"type\", \"type\": \"STRING\", \"mode\": \"NULLABLE\" } ] } ], }, location: 'us-central1', } const datasetId = 【指定のデータセット名】 const tableId = 'TEST_TABLE' const [job] = await bigquery .dataset(datasetId) .table(tableId) .load(storage.bucket(bucketName).file(`${gcsEvent.name}`), metadata) }; package.jsonを開き、dependenciesにgoogle-cloud/storageとgoogle-cloud/bigQueryを追記します。 { \"name\": \"sample-cloud-storage\", \"version\": \"0.0.1\", \"dependencies\": { \"@google-cloud/storage\": \"^5.8.1\", \"@google-cloud/bigquery\": \"^5.10.0\" } } 『デプロイ』を選択し、デプロイされるのを待ちます。約１分ほどでデプロイが完了します。 テストデータの作成 GoogleMapを開きます。https://www.google.co.jp/maps お気に入りの場所を選択し、『スター付き』を選択します。 複数スターを付けていきます。 Googleデータエクスポートを開きます。https://takeout.google.com/settings/takeout「選択をすべて解除」選択し、「マップ（マイプレイス）」のみ選択します。 「次のステップ」　＞　「エクスポート作成」をクリックします。 「ダウンロード」をクリックします。 ダウンロードしたZIPファイルを解凍し、JSON形式でスターを付けた情報が存在することを確認します。 ダウンロードしたJSONデータですがカラム名にスペースが混在しており、BigQueryとしては都合が悪いため、置換して削除します。以下コマンドをGitBash等のTerminalで実行します。 cd *JSONデータをダウンロードしたディレクトリ sed -z 's/\\n//g' 保存した場所.json | sed -z 's/Google Maps URL/GoogleMapsURL/g' | sed -z 's/Business Name/BusinessName/g' | sed -z 's/Geo Coordinates/GeoCoordinates/g' | sed -z 's/Country Code/CountryCode/g' > test_data.json ※今回は上記JSONデータをコチラで用意していますので、以下リンクよりダウンロードください。 ダウンロードリンク：https://drive.google.com/file/d/1LA-Uh3oEF1iGj_ClTeIVZ7_F9V5iyKuJ/view?usp=sharing テストデータを登録する GCSを開きます。https://console.cloud.google.com/storage/browser 先ほどのプログラムに記述したバケット名を選択します。 『ファイルをアップロード』を選択し、\"test_data.json\"をアップロードします。アップロード完了後、作成したCloud Functionがアップロードされたファイルをトリガーに、BigQueryに登録されます。 BigQueryを開き、SQLエディターから、テストデータが登録されているかを確認します。https://console.cloud.google.com/bigquery SELECT * FROM *指定のデータセット名.TEST_TABLE "},"Section3.html":{"url":"Section3.html","title":"2. 検索プログラムの作成","keywords":"","body":"検索機能作成 この手順では、BigQueryを検索するプログラムをJavaScriptで作成します。また、作成したプログラムはNode.Jsで実行するため、サーバーレスで実行可能なCloud Funcitonにデプロイしていきます。 検索機能を作成する Cloud Functionを開きます。https://console.cloud.google.com/functions/ 『関数の作成』を選択します。 以下設定内容で、基本設定とトリガー設定を行います。※以下以外は全てデフォルト設定 | 設定項目 | 設定値 | | ---- | ---- | | 環境 | 第１世代 | | 関数名 | bigquerySelect | | リージョン | us-central1 | | トリガータイプ | HTTP | 『保存』→『次へ』を選択します。 ランタイムは\"Node.js 16\"を選択します。 index.jsを開き、以下コードに書き換えます。エントリポイントは、JavaScriptのプログラムに合わせ、\"main\"に変更します。このプログラムは、リクエストパラメータを条件に、SELECT文を作成し、BigQuery APIを用いてBigQueryのデータを検索しています。検索結果はレスポンス情報として、返却します。 ソースコード const { BigQuery } = require('@google-cloud/bigquery'); const bigquery = new BigQuery(); exports.main = (req, res) => { let query = \"SELECT \"+ \" Latitude,Longitude \"+ \"FROM ( \"+ \" SELECT \"+ \" GeoCoordinates \"+ \" FROM ( \"+ \" SELECT \"+ \" Location \"+ \" FROM ( \"+ \" SELECT\"+ \" properties\"+ \" FROM 【指定のデータセット名】.TEST_TABLE\"+ \" ,UNNEST(features)\"+ \" ),UNNEST(properties) \"+ \" ),UNNEST(Location) \"; if (req.query.address != null) { query = query + \" WHERE BusinessName LIKE '%\" + req.query.address + \"%' ),UNNEST(GeoCoordinates) LIMIT 1\"; } else { query = query + \" ),UNNEST(GeoCoordinates) LIMIT 1\"; } //with options const options = { query: query, useLegacySql: true, }; bigquery.createQueryJob(options) .then(results => { const [job] = results; return job.getQueryResults(); }) .then(results => { const [rows] = results; res.header('Access-Control-Allow-Origin', \"*\"); res.header('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept\"); res.status(200).send(rows); }) .catch(error => { console.log(error); }); } package.jsonを開き、dependenciesにgoogle-cloud/bigQueryを追記します。 { \"name\": \"sample-http\", \"version\": \"0.0.1\", \"dependencies\": { \"@google-cloud/bigquery\": \"^5.10.0\" } } 『デプロイ』を選択し、デプロイされるのを待ちます。約１分ほどでデプロイが完了します。 作成したCloud Function を選択します。 権限から『追加』を選択します。alluserで\"Cloud Function開発者\"の権限を付け、『保存』を選択します。\"リソースの一般公開\"の確認が求められるので、『一般アクセスを許可』を選択します。 動作確認 作成したCloud Function を選択し、トリガーURLから動作確認をします。 リクエストパラメータがBigQueryの検索条件になりますが、条件にヒットしない場合、NULLが返却されていることがわかります。 "},"Section4.html":{"url":"Section4.html","title":"3. GoogleMapへ反映","keywords":"","body":"Map画面作成 この手順では、GoogleMapJavaSciriptAPIを使い、BigQueryの情報を絞り込んでピン止めするプログラムを作成してきます。また、開発したプログラムはCloud Shell Editerで実行し、動作確認をしていきます。 ソースコードの取得 以下URLより、GoogleのSampleコードを取得します。https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-threejs-overlay-simple&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ja Cloud Shellの説明が表示されたら、『続行』を選択します。 Cloneするソースコードのリポジトリの確認が求められたら、『確認』を選択します。 Cloud Shell Editerが起動され、Smapleコードのプロジェクトが開いていることを確認します。 Map画面を作成する。 Cloud Shell Editerからindex.tsを開き、以下コードに書き換えます。ソースコードの【トリガーURL】の部分は、Cloud Functionで作成したbigquerySelectのトリガーURLを記載します。このプログラムは、手順[2.]で作成したAPIを呼び出し、検索結果をGoogle Map JavaScrit APIに反映しています。Google Map JavaScript APIの設定オプションは今回はデフォルトで行います。※バックエンド機能がJavaScriptに対し、フロントはTypeScriptですが深い意味はありません。 ソースコード import * as THREE from \"three\"; import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"; import { ThreeJSOverlayView } from \"@googlemaps/three\"; let map: google.maps.Map; function initMap(): void { let url = new URL(window.location.href); let params = url.searchParams; let triggerUrl=`【トリガーURL】`; if (params.get('address') != null) { triggerUrl=triggerUrl+`?address=`+params.get('address'); } let mapOptions; let data = new Array(); fetch(triggerUrl) .then(response => { console.log(response.status); response.json().then(userInfo => { for (var i = 0; i { gltf.scene.scale.set(10, 10, 10); gltf.scene.rotation.x = Math.PI / 2; scene.add(gltf.scene); let { tilt, heading, zoom } = mapOptions; const animate = () => { if (tilt void; } } window.initMap = initMap; export { initMap }; ターミナルから、以下コマンドを実行し、npmを初期化します。 npm i 動作確認 ターミナルから、以下コマンドを実行します。 npm start ターミナル上の実行ログに表示される\"http://localhost:300x/\"をクリックし、動作確認を行います。※port（300x）は人によって異なります。 リクエストパラメーターにaddressを付け加え、検索条件値を入れて条件を絞ってみましょう。検索条件に応じて東京タワーやスカイツリーが表示されるかと思います。※【URL】の部分は各GCPアカウントによって異なります。 https://【URL】&address=東京タワー https://【URL】&address=スカイツリー スタイルの変更 Google Map JavaScript APIではレイアウトの変更がプログラム修正なしで可能です。以下、URLにアクセスし、レイアウトを作成する場合はマップIDを作成します。https://console.cloud.google.com/google/maps-apis/studio/maps 『マップIDを作成』を選択します。 以下設定内容で、『保存』を選択します。 | 設定項目 | 設定値 | | ---- | ---- | | 環境 | 第１世代 | | 名前 | 任意 | | 地図の種類 | JavaScript | | 地図の種類 | ラスター | 次に、スタイルを作成します。左メニューから『地図のスタイル』を選択し、『スタイルを作成』を選択します。 中央にあるバリエーションから任意のレイアウトを選択し、スタイルの名前を入力して『保存』を選択します。※デフォルトでもOKです。 『ADD MAP IDS』を選択し、先ほどのマップIDに紐づけます。 左メニューから『マップ管理』を選択し、先ほどのマップIDをコピーし、再度Cloud Shell Editerを開きます。 index.tsを開き、mapOptionsのmapIdに設定し、保存します。 一連の動作確認 スタイルの設定まで出来たら、Cloud Storageに追加のJSONデータを配置し、一連の流れでデータが登録されてMap上に反映されるまで確認してみましょう。 ※追加のJSONデータをコチラで用意していますので、以下リンクよりダウンロードください。 ダウンロードリンク：https://drive.google.com/file/d/1X8QXCKnN_sWgWR83a_F7JPSo9FXAedN6/view?usp=sharing 追加のデータには、以下３つの住所情報は入っています。 - ディズニーランド - ユニバーサルスタジオジャパン - エトワール凱旋門 \"http://localhost:300x/\"を開き、スタイルが反映されていることを確認します。※port（300x）は人によって異なります。 "},"Section5.html":{"url":"Section5.html","title":"4. おまけ","keywords":"","body":"おまけ 最後に、APIの無効化や、作成したものを削除をします。 ※無料期間が終了しても自動で課金されることはありません　GCP内をCleanUpしたい方は以下手順を行ってください GCPのAPI有効化 以下URLから、APIとサービス画面を表示します。https://console.cloud.google.com/apis/dashboard 以下APIを選択し、『APIを無効化する』を選択します。 Maps JavaScript API Cloud Build API Cloud Functions API Cloud Functionの削除 Cloud Functionを開きます。https://console.cloud.google.com/functions/ 作成したCloud Function にチェックを入れ、『削除』を選択します。 "}}