{"./":{"url":"./","title":"はじめに","keywords":"","body":"はじめに 今回のゴール BigQueryに溜め込んだデータ（住所情報）を、 GoogleMapAPIを使って画面表示します。 データの溜め込みや、画面表示をさせるために、Cloud StorageやCloud Functionsを使用していきます今回は大きく３機能作成しますが、全てGCPコンソール上の開発で完結出来るハンズオンとなります。PCへのインストール不要なので、ブラウザ一つで開発するハンズオンを体験頂ければ幸いです。 使用する技術要素については、以下となります。※ページの最後に、技術要素の参考サイトを記載しています。 フロントエンド TypeScript Node.js Cloud Shell Editer（開発環境兼、実行環境） バックエンド JavaScript Node.js Cloud Functions（サーバーレス） API GoogleMap JavaScript API BigQuery API Cloud Storage API データベース BigQuery ストレージ Cloud Storage 事前に準備頂きたいこと GCPアカウントの作成 BigQueryのデータセット作成 Cloud Storageのバケット作成 手順 全体手順としては次の流れで進めます。 　0.GCPのAPI有効化 　1.データ登録機能作成 　2.検索機能作成 　3.Map画面作成 技術要素 参考サイトのリンクを記載しておきますので、参考にお使いください。 GoogleMap JavaScript API WebGL Overlay (ThreeJS wrapper)のサンプルコードをベースにしています。 BigQuery API Cloud Storage API Cloud Functions "},"Section1.html":{"url":"Section1.html","title":"0.  GCPのAPI有効化","keywords":"","body":"GCPのAPI有効化 今回のハンズオンで使用するGCPのAPIを有効化します。 GCPアカウントの確認 以下URLにアクセスし、GCPコンソールへログインします。https://console.cloud.google.com/ ダッシュボード画面が表示されることを確認します。 GCPのAPI有効化 以下URLまたは、検索バーから「Maps JavaScript API」と検索し、GoogleMap JavaScript APIを有効化します。https://console.cloud.google.com/marketplace/product/google/maps-backend.googleapis.com "},"Section5.html":{"url":"Section5.html","title":"4. おまけ","keywords":"","body":"おまけ 最後に、APIの無効化と作成Cloud Functionsを削除をします。 ※無料期間が終了しても自動で課金されることはありません　GCP内をCleanUpしたい方は以下手順を行ってください Cloud Functionsの削除 以下URLまたは、検索バーから「Cloud Functions」と検索し、Cloud Functionsを開きます。https://console.cloud.google.com/functions/ 「bigquerySelect」にチェックボックスを入れ、『権限』を選択します。 「Cloud Functions 開発者」から、allUsersの『ゴミ箱マーク』を選択します。 削除の確認が求められるので、『削除』を選択します。 作成したCloud Functions にチェックを入れ、『削除』を選択します。 削除の確認が求められるので、『削除』を選択します。 GCPのAPI無効化 以下URLまたは、検索バーから「APIとサービス」と検索し、APIとサービス画面を表示します。https://console.cloud.google.com/apis/dashboard 以下APIを選択します。 Cloud Functions API Cloud Build API Maps JavaScript API 各APIの画面で『APIを無効化する』、または『無効にします』を選択します。 "},"Section2.html":{"url":"Section2.html","title":"1. データ登録機能作成","keywords":"","body":"データ登録機能作成 テストデータは、JSON形式のデータを使用します。テストデータはBigQueryに自動で取り込めるようにするため、Cloud Storageに配置されたファイルをトリガーとして、プログラムでBigQueryに自動登録するようにします。実行環境はCloud Functionsです。 テストデータ登録機能を作成する 以下URLまたは、検索バーから「Cloud Functions」と検索し、Cloud Functionsを開きます。https://console.cloud.google.com/functions/ 『関数の作成』を選択します。 必要なAPIの有効化が求められるので、『有効にする』を選択します。 基本設定とトリガー設定を行い、『保存』を選択します。バケットは指定のバケット名に書き換えてください。 『次へ』を選択します。 ランタイムは\"Node.js 16\"を選択します。 index.jsを開き、以下コードに書き換えます。【指定のバケット名】と【指定のデータセット名】は指定の値に書き換えます。エントリポイントは、JavaScriptのプログラムに合わせ、\"main\"に変更します。 このプログラムは、GCSに配置されたトリガー情報からファイル名を取得し、指定のGCSバケットからBigQueryのテーブルにロードを行っています。GCSとBigQueryのロケーションは同じである必要があります。今回は\"us-central1\"で統一しています。 // import const { BigQuery } = require('@google-cloud/bigquery'); const { Storage } = require('@google-cloud/storage'); const bigquery = new BigQuery(); const storage = new Storage(); exports.main = async (event, context) => { const gcsEvent = event // Cloud Storageのバケット名 const bucketName = 【指定のバケット名】 // Cloud Storageのファイル形式 const metadata = { sourceFormat: 'NEWLINE_DELIMITED_JSON', schema: { fields: [ {\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"features\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ {\"name\": \"geometry\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ {\"name\": \"coordinates\",\"type\": \"NUMERIC\",\"mode\": \"REPEATED\", \"fields\": []}, {\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"} ]}, {\"name\": \"properties\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ {\"name\": \"GoogleMapsURL\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"Location\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ {\"name\": \"Address\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"BusinessName\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"CountryCode\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"GeoCoordinates\",\"type\": \"RECORD\",\"mode\": \"REPEATED\", \"fields\": [ {\"name\": \"Latitude\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"Longitude\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"} ]} ]}, {\"name\": \"Published\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"Title\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"}, {\"name\": \"Updated\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"} ]}, {\"name\": \"type\",\"type\": \"STRING\",\"mode\": \"NULLABLE\"} ]}],}, location: 'us-central1', } // BigQueryのデータセット名 const datasetId = 【指定のデータセット名】 // BigQueryのテーブル名 const tableId = 'TEST_TABLE' // BigQueryのロード実行 const [job] = await bigquery .dataset(datasetId) .table(tableId) .load(storage.bucket(bucketName).file(`${gcsEvent.name}`), metadata) }; package.jsonを開き、dependenciesにgoogle-cloud/storageとgoogle-cloud/bigQueryを追記します。 { \"name\": \"sample-cloud-storage\", \"version\": \"0.0.1\", \"dependencies\": { \"@google-cloud/storage\": \"^5.8.1\", \"@google-cloud/bigquery\": \"^5.10.0\" } } 『デプロイ』を選択し、デプロイされるのを待ちます。約１分ほどでデプロイが完了します。 テストデータの作成 ※以下手順はテストデータの作成手順ですが、　今回のハンズオンでは弊社側で用意したテストデータをお渡ししますので、そちらを利用ください。　このJSONデータには、以下２つの住所情報が入っています。 ダウンロードリンク 東京スカイツリー 東京タワー GoogleMapを開きます。https://www.google.co.jp/maps お気に入りの場所を選択し、『スター付き』を選択します。 複数スターを付けていきます。 Googleデータエクスポートを開きます。https://takeout.google.com/settings/takeout「選択をすべて解除」選択し、「マップ（マイプレイス）」のみ選択します。 「次のステップ」　＞　「エクスポート作成」をクリックします。 「ダウンロード」をクリックします。 ダウンロードしたZIPファイルを解凍し、JSON形式でスターを付けた情報が存在することを確認します。 ダウンロードしたJSONデータですがカラム名にスペースが混在しており、BigQueryとしては都合が悪いため、置換して削除します。以下コマンドをGitBash等のTerminalで実行します。 cd *JSONデータをダウンロードしたディレクトリ sed -z 's/\\n//g' 保存した場所.json | sed -z 's/Google Maps URL/GoogleMapsURL/g' | sed -z 's/Business Name/BusinessName/g' | sed -z 's/Geo Coordinates/GeoCoordinates/g' | sed -z 's/Country Code/CountryCode/g' > test_data.json テストデータを登録する 以下URLまたは、検索バーから「Cloud Stroage」と検索し、Cloud Stroageを開きます。https://console.cloud.google.com/storage/browser 先ほどのプログラムに書き加えたバケット名を選択します。 『ファイルをアップロード』を選択し、\"test_data1.json\"をアップロードします。アップロード完了後、作成したCloud Functionsがアップロードされたファイルをトリガーに、BigQueryへ登録されます。 以下URLまたは、検索バーから「BigQuery」と検索し、BigQueryを開きます。 https://console.cloud.google.com/bigquery 『クエリを新規作成』を選択し、SQLエディターから、SELECT文を実行しテストデータが登録されているかを確認します。 SELECT * FROM *指定のデータセット名.TEST_TABLE "},"Section3.html":{"url":"Section3.html","title":"2. 検索機能作成","keywords":"","body":"検索機能作成 BigQueryに登録したデータを検索するプログラムをします。検索条件はリクエストパラメータで渡すようにし、緯度経度情報を検索結果として取得します。実行環境はCloud Functionsです。 検索機能を作成する 以下URLまたは、検索バーから「Cloud Functions」と検索し、Cloud Functionsを開きます。https://console.cloud.google.com/functions/ 『関数の作成』を選択します。 基本設定とトリガー設定を行い、『保存』を選択します。 『次へ』を選択します。 ランタイムは\"Node.js 16\"を選択します。 index.jsを開き、以下コードに書き換えます。エントリポイントは、JavaScriptのプログラムに合わせ、\"main\"に変更します。 このプログラムは、リクエストパラメータを条件に、SELECT文を作成し、BigQuery APIを用いてBigQueryのデータを検索しています。検索条件はBusinessNameです。検索結果は、緯度・経度情報を取得します。検索結果はレスポンス情報として、返却します。 // import const { BigQuery } = require('@google-cloud/bigquery'); const bigquery = new BigQuery(); exports.main = (req, res) => { // SQL文作成 let query = \"SELECT Latitude,Longitude \"+ \"FROM ( \"+ \" SELECT GeoCoordinates \"+ \" FROM ( \"+ \" SELECT Location \"+ \" FROM ( \"+ \" SELECT properties \"+ \" FROM 【指定のデータセット名】.TEST_TABLE \"+ \" ,UNNEST(features) \"+ \" ),UNNEST(properties) \"+ \" ),UNNEST(Location) \"; if (req.query.address != null) { query = query + \" WHERE BusinessName LIKE '%\" + req.query.address + \"%' ),UNNEST(GeoCoordinates) LIMIT 1\"; } else { query = query + \" ),UNNEST(GeoCoordinates) LIMIT 1\"; } // SQLオプション設定 const options = { query: query, useLegacySql: false, }; // SELECT実行 bigquery.createQueryJob(options) .then(results => { const [job] = results; return job.getQueryResults(); }) .then(results => { const [rows] = results; res.header('Access-Control-Allow-Origin', \"*\"); res.header('Access-Control-Allow-Headers', \"Origin, X-Requested-With, Content-Type, Accept\"); res.status(200).send(rows); }) .catch(error => { console.log(error); }); } package.jsonを開き、dependenciesにgoogle-cloud/bigQueryを追記します。 { \"name\": \"sample-http\", \"version\": \"0.0.1\", \"dependencies\": { \"@google-cloud/bigquery\": \"^5.10.0\" } } 『デプロイ』を選択し、デプロイされるのを待ちます。約１分ほどでデプロイが完了します。 作成したCloud Functions を選択します。 画面からのアクセスを許可します。『権限』タブから『追加』を選択し、alluserで\"Cloud Functions開発者\"の権限を付け、『保存』を選択します。\"リソースの一般公開\"の確認が求められるので、『一般アクセスを許可』を選択します。 動作確認 『トリガー』タブから、『トリガーURL』を選択して動作確認をします。 テストデータはスカイツリーと、東京タワーの二つが登録されているので、リクエストパラメータに\"?address=スカイツリー\"のように検索値を渡すことで、BigQueryの検索結果が変わることが確認できます。。また、テストデータの存在しない条件の場合は、NULLが返却されていることがわかります。 "},"Section4.html":{"url":"Section4.html","title":"3. Map画面作成","keywords":"","body":"Map画面作成 この手順では、GoogleMapJavaSciriptAPIを使い、BigQueryの情報を絞り込んでピン止めするプログラムを作成してきます。開発環境と実行環境はCloud Shell Editerです。 ソースコードの取得 以下URLより、Google社が提供しているSampleコードを取得します。https://ssh.cloud.google.com/cloudshell/editor?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fgooglemaps%2Fjs-samples&cloudshell_git_branch=sample-threejs-overlay-simple&cloudshell_tutorial=cloud_shell_instructions.md&cloudshell_workspace=.&hl=ja Cloud Shell Editerが起動され、説明文が表示されます。『続行』を選択します。 Cloneするソースコードのリポジトリの確認が求められたら、『確認』を選択します。 Cloud Shell Editerが起動され、Smapleコードのプロジェクトが開いていることを確認します。 Map画面を作成する。 Cloud Shell Editerからindex.tsを開き、以下コードに書き換えます。ソースコードの【トリガーURL】の部分は、手順[2.]のCloud Functionsで作成したbigquerySelectのトリガーURLを記載します。 このプログラムは、トリガーURLにアクセスし、検索結果を取得出来たらGoogleMap JavaScrit APIを使って画面描写をしています。 このソースコードには、GoogleMap JavaScript APIの各設定オプションがありますので、表示方法を変えたい場合は設定オプションを変更することでレイアウトを変更できます。 // import import * as THREE from \"three\"; import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"; import { ThreeJSOverlayView } from \"@googlemaps/three\"; let map: google.maps.Map; function initMap(): void { let url = new URL(window.location.href); let params = url.searchParams; let triggerUrl=`【トリガーURL】`; if (params.get('address') != null) { triggerUrl=triggerUrl+`?address=`+params.get('address'); } let mapOptions; let data = new Array(); // Cloud FunctionsのSELECT結果取得 fetch(triggerUrl) .then(response => { console.log(response.status); response.json().then(userInfo => { for (var i = 0; i { gltf.scene.scale.set(10, 10, 10); gltf.scene.rotation.x = Math.PI / 2; scene.add(gltf.scene); let { tilt, heading, zoom } = mapOptions; const animate = () => { if (tilt void; } } window.initMap = initMap; export { initMap }; ターミナルから、以下コマンドを実行し、npmを初期化します。 npm i 動作確認 ターミナルから、以下コマンドを実行し、アプリケーションを起動します。 npm start ターミナル上の実行ログに表示される \"http://localhost:300x/\" をクリック（またはCtrl + クリック）し、 動作確認を行います。※port（300x）は人によって異なります。 リクエストパラメーターを付け加え、検索条件値を入れて条件を絞ってみましょう。検索条件に応じて東京タワーやスカイツリーが表示されるかと思います。※【URL】の部分は各GCPアカウントによって異なります。 例） 　https://【URL】&address=東京タワー 　https://【URL】&address=スカイツリー スタイルの変更 GoogleMap JavaScript APIではレイアウトの変更がプログラム修正なしで可能です。以下、URLにアクセスし、マップIDを作成します。https://console.cloud.google.com/google/maps-apis/studio/maps 『マップIDを作成』を選択します。 以下設定内容で、『保存』を選択します。 スタイルを作成します。左メニューから『地図のスタイル』を選択し、『スタイルを作成』を選択します。 バリエーションから任意のレイアウトを選択し、スタイルの名前を入力して『保存』を選択します。※デフォルトでもOKです。 『ADD MAP IDS』を選択し、先ほど作成したマップIDに紐づけます。 左メニューから『マップ管理』を選択し、先ほどのマップIDをコピーし、再度Cloud Shell Editerを開きます。 index.tsを開き、mapOptionsのmapIdに作成したマップIDに書き換え、保存します。 一連の動作確認 スタイルの設定まで出来たら、Cloud Storageに追加のJSONデータを配置し、一連の流れでデータが登録されてMap上に反映されるまで確認してみましょう。追加のJSONデータは、以下リンクよりダウンロードください。以下３つの住所情報が入っています。ダウンロードリンク ディズニーランド ユニバーサルスタジオジャパン エトワール凱旋門 \"http://localhost:300x/\" を開き、スタイルが反映されていることを確認します。※port（300x）は人によって異なります。 "}}